#Autogenerated by ReportLab guiedit do not edit
from reportlab.graphics.shapes import Drawing, _DrawingEditorMixin, Group, Line
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.lib.colors import limegreen, lightgreen, yellow, orangered, deepskyblue, orange , lightgrey, darkgrey, cornflower, black, red, Color, white
try:
	from rml.vthermometerbar import VThermometerBar
	from rml.co2icon import CO2
except ImportError:
	from vthermometerbar import VThermometerBar  # when running the test below in the subdirectory
	from co2icon import CO2
from reportlab.lib.utils import flatten
from reportlab.graphics.charts.textlabels import Label
from reportlab.graphics.widgets.adjustableArrow import AdjustableArrow

class ThermometerChart(_DrawingEditorMixin,Drawing):
	def __init__(self,width=215,height=335,*args,**kw):
		Drawing.__init__(self,width,height,*args,**kw)
		self._add(self,CO2(),name='co2',validate=None,desc=None)
		self._add(self,VerticalBarChart(),name='chart',validate=None,desc=None)
		self._add(self,Group(),name='extras',validate=None,desc=None)
		self.co2.width = 54
		self.co2.height = 34
		self.co2.transform 		= [1, 0, 0, 1, 54, 290]
		self.chart.x = 20
		self.chart.y = 1
		self.chart.groupSpacing    = 1
		self.chart.categoryAxis.style='stacked'
		self.chart.barWidth        = 0.3
		self.chart.width          =100
		self.chart.height          =280
		self.chart.strokeWidth     = 1
		self.chart.valueAxis.visibleTicks            = 0
		self.chart.valueAxis.visible                 = 0
		self.chart.categoryAxis.visible              = 0
		self.chart.bars.strokeColor     = white
		self.chart.bars.strokeWidth     = 0.5
		self.chart.bars[0].fillColor   = limegreen
		self.chart.bars[1].fillColor   = orange
		self.chart.bars[2].fillColor   = deepskyblue
		self.chart.bars[3].fillColor   = orangered
		self.chart.bars[4].fillColor   = lightgrey
		self.chart.bars[5].fillColor   = Color(0.9, 0.9, 0.9) # light grey top buffer
		self._chart_data            = [(2,), (4,), (8,),(12,),(2,)]
		self.chart.barLabels.x                =0
		self.chart.barLabels.textAnchor='end'
		self.chart.barLabels.dx               = 0
		self.chart.barLabels.dy               = 0
		self.chart.barLabels.boxTarget='mid'
		self.chart.barLabels.fontSize         = 10
		self.chart.barLabels.fillColor        = white
		self.chart.barLabels.fontSize         = 20
		self.chart.barLabels.fontName         = 'Helvetica-Bold'
		self.chart.barWidth        = 1
		self.chart.barLabelFormat  = 'values'
		self.chart.barLabels.fontSize         = 12
		self.chart.barLabels.width            = 0
		self.chart.barLabels.visible          = 1
		self.chart.barLabels.boxAnchor='c'
		self.chart.barLabelArray   = ['Year 1', 'Year 2', 'Year 3', 'Year 5+']
		self.chart.barWidth        = 0.7
		self.chart.bars[0].symbol = VThermometerBar(fillColor=limegreen,strokeColor=white,strokeWidth=self.chart.bars.strokeWidth)
		self.chart.barLabels[0].visible             = 0
		self.chart.barLabels[4].visible             = 0
		self.chart.barLabels[5].visible             = 0
		self._labelPointer = lambda x0,y0,x1,y1: Line(x0,y0,x1,y1,strokeColor=darkgrey,strokeWidth=1.5,strokeDashArray=[1,1])
		self._labelPointerLeft = True	#set to False i draw to right edge of the bar
		self._l4text = "Your starting point" #might get reversed
		self._l5text = "State average" #might get reversed

	def getContents(self):
		extras = self.extras
		del extras.contents[:]
		l0 = "Green your power supply to get it to 0%"
		l1 = "Year 5+ \nprojects complete"
		l2 = "Year 2 \n projects complete"
		l3 = "Year 1 \nprojects complete"
		l4 = self._l4text
		l5 = self._l5text
		chart = self.chart
		data = self._chart_data
		chart.barLabelArray  = [[('-%s%%' % d[0])] for d in data]
		chart.data = [[d0] for d0 in (max(2,d[0]) for d in data)]
		chart._computeBarPositions()
		bp = [p[0] for p in chart._barPositions]
		pylo = [p[1] for p in bp]
		pyhi = [p[1]+p[3] for p in bp]
		pymid = [p[1]+p[3]*0.5 for p in bp]
		#print(f'{bp=}')
		#print(f'{pylo=}')
		#print(f'{pymid=}')
		#print(f'{pyhi=}')
		x_start_labels = 120
		lmw = 80
		extras.add(Label(_text="Get to Zero",x=120,y=315,angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=14, fillColor=limegreen))
		extras.add(Label(_text=l0,x=x_start_labels,y=pymid[0],maxWidth=lmw, angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=8, fillColor=chart.bars[0].fillColor))
		l0Label = extras.contents[-1]	#needed for arrow positioning
		extras.add(Label(_text=l1,x=x_start_labels,y=pymid[1],maxWidth=lmw, angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=8, fillColor=chart.bars[1].fillColor))
		extras.add(Label(_text=l2,x=x_start_labels,y=pymid[2],maxWidth=lmw, angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=8, fillColor=chart.bars[2].fillColor))
		extras.add(Label(_text=l3,x=x_start_labels,y=pymid[3],maxWidth=lmw, angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=8, fillColor=chart.bars[3].fillColor))
		extras.add(Label(_text=l4,x=x_start_labels,y=pyhi[3],maxWidth=lmw, angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=8, fillColor=cornflower))
		extras.add(Label(_text=l5,x=x_start_labels,y=pyhi[4],maxWidth=lmw, angle=0,boxAnchor='w', fontName='Helvetica-Bold', fontSize=8, fillColor=black))
		extras.add(Label(_text='0%',x=x_start_labels-20,y=pylo[0],maxWidth=lmw, angle=0,boxAnchor='s', fontName='Helvetica-Bold', fontSize=14, fillColor=limegreen))
		barx = (min if True else max)(bp[0][0],bp[0][0]+bp[0][2])
		for y in pymid[1],pymid[2],pymid[3]: self.extras.add(self._labelPointer(barx+35,y,x_start_labels,y))
		extras.add(self._labelPointer(barx,pyhi[4],x_start_labels,pyhi[4]))
		extras.add(self._labelPointer(barx+35,pyhi[3],x_start_labels,pyhi[3]))
		extras.add(self._labelPointer(barx+15,pylo[0],x_start_labels,pylo[0]))
		#add the arrow
		box = l0Label.getBounds()	#needed for the arrow y position
		#print(f'label0 {box=}')
		#we assume west anchor so top of box is above that
		yLineBase = l0Label.y + 0.5*abs(box[3]-box[1]) - 2# - l0Label.fontSize
		extras.add(AdjustableArrow(x=x_start_labels-2,y=chart.y,stemThickness=0.5,stemLength=yLineBase-chart.y-3, headLength=3,headProjection=1,boxAnchor='n',angle=-90,fillColor=chart.bars[0].fillColor))
		extras.add(AdjustableArrow(x=30,y=0,stemThickness=0.5,stemLength=chart.height-4, headLength=3,headProjection=1,boxAnchor='n',angle=-90,fillColor=chart.bars[4].fillColor))
		return Drawing.getContents(self)

if __name__=="__main__": #NORUNTESTS
	ThermometerChart().save(formats=['pdf','png'],outDir='.',fnRoot=None)
